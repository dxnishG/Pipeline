name: Deploy to Amazon

on:
  push:

env:
  AWS_REGION          : ap-southeast-1
  ECR_REPOSITORY      : my-repo-${{ github.ref_name }}
  ECS_SERVICE         : my-ecs-service
  ECS_CLUSTER         : my-ecs-cluster
  ECS_TASK_DEFINITION : .aws/task-definition.json
  CONTAINER_NAME      : my-container

permissions:
  contents: read

jobs:
  deploy-prod:
    name: Deploy to Amazon ECS - Production
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v1.1.0
        with:
          args: >
            -Dsonar.projectKey=my_project_key
            -Dsonar.organization=my_organization
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
            -x
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          JAVA_HOME: /opt/hostedtoolcache/Java_Adopt_jdk/17.0.0-0/x64
          JAVA_HOME_17_X64: /opt/hostedtoolcache/Java_Adopt_jdk/17.0.0-0/x64
          PATH: /opt/hostedtoolcache/Java_Adopt_jdk/17.0.0-0/x64/bin:$PATH
          SONAR_SCANNER_OPTS: "-Xmx1024m"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, Tag, and Push Docker Image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Building Docker image..."
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          echo "Pushing Docker image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Update ECS Task Definition with New Image
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Verify Deployment
        run: |
          echo "Deployment verified."
          